[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "taller_nbdev_divertido",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "taller_nbdev_divertido"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "taller_nbdev_divertido",
    "section": "Install",
    "text": "Install\npip install taller_nbdev_divertido",
    "crumbs": [
      "taller_nbdev_divertido"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "taller_nbdev_divertido",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2",
    "crumbs": [
      "taller_nbdev_divertido"
    ]
  },
  {
    "objectID": "cluster.html",
    "href": "cluster.html",
    "title": "core",
    "section": "",
    "text": "Puntos\nEsto es una clase que nos sirve para generar puntos aleatorios dentro de un cuadrado\n\n\ndata_points\n\n data_points (n, min_x=0, min_y=0, max_x=1, max_y=1, seed=None)\n\nUna clase que contiene a los datos\n\ndatos_simples.get_Multypoint()\n\n\n\n\n\n\n\n\n\ndatos_simples = data_points(500, min_x = .75, min_y= .75, max_x= 1, max_y= 1 )\n\n\ndatos_simples.get_Multypoint()\n\n\n\n\n\n\n\n\n\n\n\nClusters\n\n Clusters (data_points_i, seed=1234)\n\n*Clase para generar los clusters a partir de un objeto de la clase data_points\nEsta clase se utiliza para generar los distintos tipos de clusterizaciones, se almacena los datos en una estructura de datos y se le añaden las respectivas classes*\n\ncluster_all.data_structure.classes_DBSCAN\n\narray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\n\n\ncluster_all.data_structure.classes_Kmeans\n\narray([5, 0, 6, 7, 0, 2, 3, 3, 0, 3, 0, 4, 4, 1, 7, 4, 7, 7, 7, 7, 0, 6,\n       0, 2, 4, 2, 5, 2, 7, 0, 6, 7, 1, 4, 4, 6, 2, 6, 3, 2, 7, 5, 7, 6,\n       2, 4, 2, 2, 0, 3, 4, 7, 4, 5, 1, 7, 7, 0, 7, 7, 1, 3, 6, 2, 4, 0,\n       2, 6, 5, 3, 1, 6, 4, 2, 0, 0, 7, 2, 3, 6, 0, 0, 7, 7, 5, 5, 2, 0,\n       7, 1, 5, 3, 6, 1, 1, 3, 6, 1, 0, 6, 7, 0, 6, 4, 3, 5, 4, 7, 6, 5,\n       4, 4, 4, 3, 7, 6, 3, 1, 7, 6, 1, 0, 7, 6, 0, 3, 1, 1, 7, 4, 5, 2,\n       0, 6, 4, 5, 6, 0, 6, 4, 3, 6, 2, 5, 0, 2, 6, 2, 3, 5, 4, 3, 7, 4,\n       2, 0, 1, 1, 3, 3, 5, 6, 6, 3, 1, 1, 4, 6, 6, 1, 4, 4, 7, 4, 4, 6,\n       3, 4, 1, 7, 7, 6, 5, 5, 0, 3, 2, 3, 0, 7, 7, 4, 4, 1, 4, 4, 1, 3,\n       2, 7, 6, 7, 4, 3, 3, 4, 6, 2, 6, 3, 4, 6, 0, 1, 0, 4, 5, 1, 2, 0,\n       2, 0, 2, 2, 0, 1, 6, 0, 1, 3, 1, 4, 5, 0, 4, 4, 4, 7, 5, 6, 0, 5,\n       1, 7, 3, 3, 7, 2, 6, 6, 4, 1, 5, 2, 1, 1, 3, 0, 4, 0, 2, 4, 5, 0,\n       4, 4, 5, 6, 0, 1, 3, 2, 3, 6, 7, 3, 5, 6, 0, 6, 1, 2, 3, 4, 1, 2,\n       3, 6, 4, 5, 7, 4, 6, 3, 4, 0, 0, 2, 0, 7, 0, 7, 5, 4, 4, 4, 2, 3,\n       0, 7, 5, 7, 1, 4, 0, 3, 1, 4, 4, 7, 0, 0, 2, 7, 0, 5, 6, 0, 6, 5,\n       4, 5, 2, 4, 2, 6, 2, 2, 3, 7, 4, 5, 3, 0, 4, 0, 7, 6, 4, 0, 1, 1,\n       3, 1, 4, 0, 3, 0, 0, 3, 0, 1, 7, 6, 1, 3, 1, 6, 6, 3, 1, 6, 5, 5,\n       3, 0, 7, 4, 0, 6, 4, 1, 5, 0, 2, 2, 5, 6, 0, 1, 0, 7, 5, 6, 4, 1,\n       4, 5, 4, 6, 3, 4, 5, 2, 6, 0, 7, 5, 0, 6, 5, 2, 1, 4, 6, 1, 2, 1,\n       1, 2, 6, 4, 1, 7, 5, 5, 6, 6, 6, 0, 2, 5, 4, 5, 6, 0, 1, 0, 4, 6,\n       4, 0, 0, 3, 4, 6, 2, 4, 1, 4, 0, 0, 1, 7, 1, 1, 1, 0, 3, 2, 5, 7,\n       0, 5, 5, 6, 0, 3, 3, 3, 0, 0, 7, 6, 1, 1, 7, 7, 1, 3, 6, 2, 0, 7,\n       2, 2, 5, 1, 6, 4, 6, 3, 1, 7, 2, 7, 3, 7, 4, 1], dtype=int32)\n\n\n\ncluster_all.data_structure.classes_OPTICS\n\narray([-1, -1, -1, 25, 13,  2,  7, 26, 11, -1, -1, -1, 23, 27, 25, 24, 31,\n       31, -1, 18, 13, -1, 10, -1, 20, -1, -1, -1, 25, -1,  8, 25, -1, -1,\n       -1, 14, -1, 15,  6, -1, 18,  1, -1, 28, -1, -1,  2, -1, -1,  7, 22,\n       -1, 21, -1, 27, 18, 31, 26, 25, -1,  4,  9, -1, 16, 20, 10, -1, 14,\n        1, 26,  3, -1, -1, -1, 12, 12, 31, 17,  7, 15, -1, -1, 18, 18, -1,\n       29, -1, 10, 25,  5, -1,  6, 28, 27, -1, 29, -1, -1, 13, -1, 31, -1,\n       15, -1,  7, -1, -1, -1, 15,  0, 21, -1, 30,  6, 25, 28,  6,  5, -1,\n       15, -1, -1, 18,  8, 12, 26, -1, 27, -1, 21,  1,  2, -1,  8, -1,  1,\n       14, -1, 15, 22,  6, -1, -1, -1, -1,  2, 15,  2,  9, 29, -1,  6, -1,\n       21, 16, -1,  5,  3, 29,  7,  1, 14, 28, -1,  3, 27, 22, -1, -1, -1,\n       21, -1, 25, 24, 22, 14,  9, -1,  5, 25, 25, -1,  1, -1, 10,  9,  2,\n        6, 10, 25, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1, 15, 31, -1,  6,\n       -1, 20, 28, -1, 15, 26, 30, 28, 26, -1, -1, 23,  0, -1, 16, 10, -1,\n       -1, 16, -1, 17,  3, -1, 10,  3,  7, -1, 24, -1, 11, 21, -1, -1, 25,\n        1, 28, -1, -1, 27, 18,  7,  6, 25,  2, 28, -1, -1, -1,  0,  2,  5,\n       -1, -1, 12, 30, -1,  2, -1,  1, -1, -1, -1,  0, -1, -1, -1,  6,  2,\n        7, 28, -1,  7, 29,  8, -1, -1,  4,  2,  7, -1,  4, -1,  6, 14, -1,\n       -1, 18, 23, 19,  7, 23, 26, 18,  2, -1, -1, -1, -1,  1, -1, 30, 23,\n       16,  9, -1, 18, 29, 25,  3, -1, 17, 26,  4, 30, 24, 31, -1, -1, -1,\n       -1, 10,  0, -1, 17, -1, -1, 20, -1, -1, 21,  2,  8, 16, -1,  7, 18,\n       21, -1, -1, 11, -1, 12, 18, -1, -1, 10,  3, -1,  7, -1, -1, -1,  9,\n       18, 12, 29, 12,  5, -1, 19, -1, -1,  5, 28, 19, -1, -1, -1, -1, -1,\n       -1, 17, -1, -1, 10, -1, -1,  4,  1, 13, 16, 16,  0, 19, -1, -1, 17,\n       25,  1, 19, 24,  5, -1, -1, 20, 19, -1, -1,  1,  2, -1, 12, -1, -1,\n       17, -1, -1, 16, -1, -1, 19, -1, -1, -1,  5, -1, 19, -1, -1, 31, 29,\n       29, -1, 28, 19, -1, 16, -1, 22,  0, -1, 10, -1, 11, 22, 19, -1, -1,\n       -1,  6, -1, -1,  2, 22, 27, 30, 11, 18, -1, -1, -1, -1,  3, 12,  7,\n        2,  0, 18, -1,  0, -1, -1, 17, -1, -1,  6, -1, 13, -1, -1, -1, 27,\n       25, 18, -1,  6, 15,  2, 11, 25, -1, 16, -1, -1, -1, 21, 19, -1,  5,\n       25,  2, 20,  6, -1, 23, -1])\n\n\n\ndatos_simples_3 = data_points(500, min_x = 0.6, min_y= 0.6, max_x= 1.0, max_y= 1.0 )\ndatos_simples_2 = data_points(500, min_x = 0.0, min_y= 0.6, max_x= 0.4, max_y= 1.0 )\ndatos_simples_1 = data_points(500, min_x = 0.6, min_y= 0.0, max_x= 1.0, max_y= 0.4 )\ndatos_simples_0 = data_points(500, min_x = 0.0, min_y= 0.0, max_x= 0.4, max_y= 0.4 )\n\n\ndatos_simples_0.add_points(datos_simples_1)\ndatos_simples_0.add_points(datos_simples_2)\ndatos_simples_0.add_points(datos_simples_3)\n\n\ndatos_simples_0.get_Multypoint()\n\n\n\n\n\n\n\n\n\ncluster_all  = Clusters(datos_simples_0)\n\n\ncluster_all.OPTICS()\ncluster_all.HDBSCAN()\ncluster_all.DBSCAN(eps=0.1, min_samples=10)\ncluster_all.KMeans()\n\n\nfig, ax = plt.subplots(1,1, figsize=(6,6))\ncolor_map = matplotlib.colormaps['viridis'].resampled(len(np.unique(cluster_all.data_structure.classes_DBSCAN)))\ncolors = [plt.cm.Spectral(each) for each in np.linspace(0, 1, len(np.unique(cluster_all.data_structure.classes_DBSCAN)))]\nplt.scatter(\n        cluster_all.data_structure.get_X(),\n        cluster_all.data_structure.get_Y(),\n        c = cluster_all.data_structure.classes_DBSCAN\n        #s = cluster_all.data_structure.classes_DBSCAN,\n        #c= colors()\n    )\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(1,1, figsize=(6,6))\nplt.scatter(\n        cluster_all.data_structure.get_X(),\n        cluster_all.data_structure.get_Y(),\n        c = cluster_all.data_structure.classes_OPTICS\n        #s = cluster_all.data_structure.classes_DBSCAN,\n        #c= colors()\n    )\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(1,1, figsize=(6,6))\nplt.scatter(\n        cluster_all.data_structure.get_X(),\n        cluster_all.data_structure.get_Y(),\n        c = cluster_all.data_structure.classes_Kmeans\n        #s = cluster_all.data_structure.classes_DBSCAN,\n        #c= colors()\n    )\n\n\n\n\n\n\n\n\n\nfig, ax = plt.subplots(1,1, figsize=(6,6))\nplt.scatter(\n        cluster_all.data_structure.get_X(),\n        cluster_all.data_structure.get_Y(),\n        c = cluster_all.data_structure.classes_HDBSCAN\n        #s = cluster_all.data_structure.classes_DBSCAN,\n        #c= colors()\n    )",
    "crumbs": [
      "core"
    ]
  }
]